1) record class

A record class in C# is a special reference type introduced in C# 9 that is mainly used for immutable data models.
Unlike normal classes, records automatically provide:

Value-based equality (two records with the same data are considered equal, unlike normal classes which compare by reference).
Built-in immutability (using init instead of set).
Concise syntax for declaring data carriers.
=============================================================================================================================
2) Why must operator overloading be non-private static data member?

In C#, operator overloads must be declared as public static methods inside a class/struct.

Static: Because operators work on two operands passed in, they don’t act on a specific object instance like an instance method.

Non-private (public): Because overloaded operators are meant to be used externally on objects of that type.
If they were private, they couldn’t be accessed by user code.
=============================================================================================================================
3) Couple operators: Comparison (operator overloading)

Comparison operators (==, !=, <, >, <=, >=) can be overloaded in C#.

They allow custom objects to be compared in a natural way (like numbers or strings).

Typically, if you overload ==, you should also overload != for consistency.

Similarly, < should be paired with >, and <= with >=.
=============================================================================================================================
4) Partial class > Source.browser

A partial class in C# allows a single class to be split across multiple files.

Useful for separating auto-generated code (like in Visual Studio designer files, e.g., Form1.Designer.cs)
from user-written code.

Helps organize large classes into logical parts without losing the fact that they are still a single class.

In real projects, this is often used with tools
like ASP.NET, WinForms, or WPF, where one file is generated by the designer and another is maintained by the programmer.

=============================================================================================================================
What is Event-driven programming?

Event-driven programming is a style where the program’s flow is controlled by events (like button clicks or key presses).
Instead of running in a fixed sequence, the program waits for events and reacts by executing event handlers.